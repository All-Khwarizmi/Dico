generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model Word {
  id        Int       @id @default(autoincrement())
  source    String    @unique
  word      String[]
  searches  Search[]
}

model Search {
  id          Int      @id @default(autoincrement())
  wordSource  String   // Le mot recherché
  searchTime  DateTime @default(now()) // Moment de la recherche
  language    String   // Langue de la recherche
  foundInDB   Boolean  // Si la recherche a trouvé le mot dans la base de données
  Word        Word?    @relation(fields: [wordId], references: [id])
  wordId      Int?     // L'ID du mot dans `Word` si trouvé
}